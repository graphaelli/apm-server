// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: error.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ErrorValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTraceId()) < 1 {
		return ErrorValidationError{
			field:  "TraceId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		return ErrorValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		return ErrorValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
	}

	if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Culprit

	if v, ok := interface{}(m.GetException()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Exception",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on Error_Exception with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Error_Exception) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	if utf8.RuneCountInString(m.GetModule()) > 1024 {
		return Error_ExceptionValidationError{
			field:  "Module",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for Attributes

	for idx, item := range m.GetStacktrace() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Error_ExceptionValidationError{
					field:  fmt.Sprintf("Stacktrace[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetType()) > 1024 {
		return Error_ExceptionValidationError{
			field:  "Type",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for Handled

	switch m.Code.(type) {

	case *Error_Exception_NumberValue:
		// no validation rules for NumberValue

	case *Error_Exception_StringValue:

		if utf8.RuneCountInString(m.GetStringValue()) > 1024 {
			return Error_ExceptionValidationError{
				field:  "StringValue",
				reason: "value length must be at most 1024 runes",
			}
		}

	}

	return nil
}

// Error_ExceptionValidationError is the validation error returned by
// Error_Exception.Validate if the designated constraints aren't met.
type Error_ExceptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Error_ExceptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Error_ExceptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Error_ExceptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Error_ExceptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Error_ExceptionValidationError) ErrorName() string { return "Error_ExceptionValidationError" }

// Error satisfies the builtin error interface
func (e Error_ExceptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError_Exception.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Error_ExceptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Error_ExceptionValidationError{}

// Validate checks the field values on Error_Log with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Error_Log) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetLevel()) > 1024 {
		return Error_LogValidationError{
			field:  "Level",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLoggerName()) > 1024 {
		return Error_LogValidationError{
			field:  "LoggerName",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		return Error_LogValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetParamMessage()) > 1024 {
		return Error_LogValidationError{
			field:  "ParamMessage",
			reason: "value length must be at most 1024 runes",
		}
	}

	for idx, item := range m.GetStacktrace() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Error_LogValidationError{
					field:  fmt.Sprintf("Stacktrace[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Error_LogValidationError is the validation error returned by
// Error_Log.Validate if the designated constraints aren't met.
type Error_LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Error_LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Error_LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Error_LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Error_LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Error_LogValidationError) ErrorName() string { return "Error_LogValidationError" }

// Error satisfies the builtin error interface
func (e Error_LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError_Log.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Error_LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Error_LogValidationError{}

// Validate checks the field values on Error_Transaction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Error_Transaction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sampled

	if utf8.RuneCountInString(m.GetType()) > 1024 {
		return Error_TransactionValidationError{
			field:  "Type",
			reason: "value length must be at most 1024 runes",
		}
	}

	return nil
}

// Error_TransactionValidationError is the validation error returned by
// Error_Transaction.Validate if the designated constraints aren't met.
type Error_TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Error_TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Error_TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Error_TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Error_TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Error_TransactionValidationError) ErrorName() string {
	return "Error_TransactionValidationError"
}

// Error satisfies the builtin error interface
func (e Error_TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError_Transaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Error_TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Error_TransactionValidationError{}
