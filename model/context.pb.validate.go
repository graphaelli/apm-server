// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: context.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ListString with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListString) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListStringValidationError is the validation error returned by
// ListString.Validate if the designated constraints aren't met.
type ListStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStringValidationError) ErrorName() string { return "ListStringValidationError" }

// Error satisfies the builtin error interface
func (e ListStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStringValidationError{}

// Validate checks the field values on Context2 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Context2) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Custom

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2ValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2ValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tags

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2ValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2ValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2ValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// Context2ValidationError is the validation error returned by
// Context2.Validate if the designated constraints aren't met.
type Context2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Context2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Context2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Context2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Context2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Context2ValidationError) ErrorName() string { return "Context2ValidationError" }

// Error satisfies the builtin error interface
func (e Context2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Context2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Context2ValidationError{}

// Validate checks the field values on Context2_Page with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Context2_Page) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Referer

	// no validation rules for Url

	return nil
}

// Context2_PageValidationError is the validation error returned by
// Context2_Page.Validate if the designated constraints aren't met.
type Context2_PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Context2_PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Context2_PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Context2_PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Context2_PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Context2_PageValidationError) ErrorName() string { return "Context2_PageValidationError" }

// Error satisfies the builtin error interface
func (e Context2_PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext2_Page.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Context2_PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Context2_PageValidationError{}

// Validate checks the field values on Context2_Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Context2_Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Body

	// no validation rules for Env

	// no validation rules for Headers

	if utf8.RuneCountInString(m.GetHttpVersion()) > 1024 {
		return Context2_RequestValidationError{
			field:  "HttpVersion",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMethod()) > 1024 {
		return Context2_RequestValidationError{
			field:  "Method",
			reason: "value length must be at most 1024 runes",
		}
	}

	if v, ok := interface{}(m.GetSocket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2_RequestValidationError{
				field:  "Socket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Context2_RequestValidationError{
				field:  "Url",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cookies

	return nil
}

// Context2_RequestValidationError is the validation error returned by
// Context2_Request.Validate if the designated constraints aren't met.
type Context2_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Context2_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Context2_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Context2_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Context2_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Context2_RequestValidationError) ErrorName() string { return "Context2_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Context2_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext2_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Context2_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Context2_RequestValidationError{}

// Validate checks the field values on Context2_Response with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Context2_Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Finished

	// no validation rules for Headers

	// no validation rules for HeadersSent

	// no validation rules for StatusCode

	return nil
}

// Context2_ResponseValidationError is the validation error returned by
// Context2_Response.Validate if the designated constraints aren't met.
type Context2_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Context2_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Context2_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Context2_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Context2_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Context2_ResponseValidationError) ErrorName() string {
	return "Context2_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Context2_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext2_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Context2_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Context2_ResponseValidationError{}

// Validate checks the field values on Context2_Request_Socket with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Context2_Request_Socket) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Encrypted

	// no validation rules for RemoteAddress

	return nil
}

// Context2_Request_SocketValidationError is the validation error returned by
// Context2_Request_Socket.Validate if the designated constraints aren't met.
type Context2_Request_SocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Context2_Request_SocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Context2_Request_SocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Context2_Request_SocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Context2_Request_SocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Context2_Request_SocketValidationError) ErrorName() string {
	return "Context2_Request_SocketValidationError"
}

// Error satisfies the builtin error interface
func (e Context2_Request_SocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext2_Request_Socket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Context2_Request_SocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Context2_Request_SocketValidationError{}

// Validate checks the field values on Context2_Request_Url with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Context2_Request_Url) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetRaw()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Raw",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProtocol()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Protocol",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFull()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Full",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetHostname()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Hostname",
			reason: "value length must be at most 1024 runes",
		}
	}

	// no validation rules for Port

	if utf8.RuneCountInString(m.GetPathname()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Pathname",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSearch()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Search",
			reason: "value length must be at most 1024 runes",
		}
	}

	if utf8.RuneCountInString(m.GetHash()) > 1024 {
		return Context2_Request_UrlValidationError{
			field:  "Hash",
			reason: "value length must be at most 1024 runes",
		}
	}

	return nil
}

// Context2_Request_UrlValidationError is the validation error returned by
// Context2_Request_Url.Validate if the designated constraints aren't met.
type Context2_Request_UrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Context2_Request_UrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Context2_Request_UrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Context2_Request_UrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Context2_Request_UrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Context2_Request_UrlValidationError) ErrorName() string {
	return "Context2_Request_UrlValidationError"
}

// Error satisfies the builtin error interface
func (e Context2_Request_UrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext2_Request_Url.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Context2_Request_UrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Context2_Request_UrlValidationError{}
